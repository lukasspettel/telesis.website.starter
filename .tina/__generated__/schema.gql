# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
  map(relativePath: String): Map!
  mapConnection(before: String, after: String, first: Float, last: Float, sort: String): MapConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Page | Post | Map

type PageBlocksHeroPositionText {
  x: Float
  width: Float
  y: Float
  height: Float
}

type PageBlocksHeroPositionImage {
  x: Float
  width: Float
  y: Float
  height: Float
}

type PageBlocksHeroPosition {
  text: PageBlocksHeroPositionText
  image: PageBlocksHeroPositionImage
}

type PageBlocksHero {
  title: String
  subtitle: String
  image: String
  position: PageBlocksHeroPosition
}

type PageBlocksCtaButton {
  label: String
  href: String
}

type PageBlocksCta {
  title: String
  subtitle: String
  button: PageBlocksCtaButton
}

type PageBlocksQuote {
  quote: String
  author: String
  x: Float
  width: Float
}

type PageBlocksGalleryGallery {
  image: String
  alt: String
  x: Float
  width: Float
  height: Float
}

type PageBlocksGallery {
  gallery: [PageBlocksGalleryGallery]
}

type PageBlocksFactFact {
  headline: String
  subheadline: String
  x: Float
  width: Float
}

type PageBlocksFact {
  fact: [PageBlocksFactFact]
}

type PageBlocksLogosLogos {
  logo: String
  alt: String
  href: String
}

type PageBlocksLogos {
  headline: String
  logos: [PageBlocksLogosLogos]
}

type PageBlocksCardCards {
  title: String
  body: JSON
  href: String
  x: Float
  width: Float
}

type PageBlocksCard {
  cards: [PageBlocksCardCards]
}

type PageBlocksFeatured {
  category: String
  size: Float
}

type PageBlocksRichtext {
  body: JSON
}

union PageBlocks = PageBlocksHero | PageBlocksCta | PageBlocksQuote | PageBlocksGallery | PageBlocksFact | PageBlocksLogos | PageBlocksCard | PageBlocksFeatured | PageBlocksRichtext

type Page implements Node & Document {
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type PostBlocksHeroPositionText {
  x: Float
  width: Float
  y: Float
  height: Float
}

type PostBlocksHeroPositionImage {
  x: Float
  width: Float
  y: Float
  height: Float
}

type PostBlocksHeroPosition {
  text: PostBlocksHeroPositionText
  image: PostBlocksHeroPositionImage
}

type PostBlocksHero {
  title: String
  subtitle: String
  image: String
  position: PostBlocksHeroPosition
}

type PostBlocksCtaButton {
  label: String
  href: String
}

type PostBlocksCta {
  title: String
  subtitle: String
  button: PostBlocksCtaButton
}

type PostBlocksQuote {
  quote: String
  author: String
  x: Float
  width: Float
}

type PostBlocksGalleryGallery {
  image: String
  alt: String
  x: Float
  width: Float
  height: Float
}

type PostBlocksGallery {
  gallery: [PostBlocksGalleryGallery]
}

type PostBlocksFactFact {
  headline: String
  subheadline: String
  x: Float
  width: Float
}

type PostBlocksFact {
  fact: [PostBlocksFactFact]
}

type PostBlocksLogosLogos {
  logo: String
  alt: String
  href: String
}

type PostBlocksLogos {
  headline: String
  logos: [PostBlocksLogosLogos]
}

type PostBlocksCardCards {
  title: String
  body: JSON
  href: String
  x: Float
  width: Float
}

type PostBlocksCard {
  cards: [PostBlocksCardCards]
}

type PostBlocksFeatured {
  category: String
  size: Float
}

type PostBlocksRichtext {
  body: JSON
}

union PostBlocks = PostBlocksHero | PostBlocksCta | PostBlocksQuote | PostBlocksGallery | PostBlocksFact | PostBlocksLogos | PostBlocksCard | PostBlocksFeatured | PostBlocksRichtext

type Post implements Node & Document {
  title: String
  category: String
  date: String
  description: String
  size: Float
  image: String
  blocks: [PostBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Map implements Node & Document {
  date: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type MapConnectionEdges {
  cursor: String!
  node: Map
}

type MapConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MapConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateMap(relativePath: String!, params: MapMutation!): Map!
  createMap(relativePath: String!, params: MapMutation!): Map!
}

input DocumentMutation {
  page: PageMutation
  post: PostMutation
  map: MapMutation
}

input PageBlocksHeroPositionTextMutation {
  x: Float
  width: Float
  y: Float
  height: Float
}

input PageBlocksHeroPositionImageMutation {
  x: Float
  width: Float
  y: Float
  height: Float
}

input PageBlocksHeroPositionMutation {
  text: PageBlocksHeroPositionTextMutation
  image: PageBlocksHeroPositionImageMutation
}

input PageBlocksHeroMutation {
  title: String
  subtitle: String
  image: String
  position: PageBlocksHeroPositionMutation
}

input PageBlocksCtaButtonMutation {
  label: String
  href: String
}

input PageBlocksCtaMutation {
  title: String
  subtitle: String
  button: PageBlocksCtaButtonMutation
}

input PageBlocksQuoteMutation {
  quote: String
  author: String
  x: Float
  width: Float
}

input PageBlocksGalleryGalleryMutation {
  image: String
  alt: String
  x: Float
  width: Float
  height: Float
}

input PageBlocksGalleryMutation {
  gallery: [PageBlocksGalleryGalleryMutation]
}

input PageBlocksFactFactMutation {
  headline: String
  subheadline: String
  x: Float
  width: Float
}

input PageBlocksFactMutation {
  fact: [PageBlocksFactFactMutation]
}

input PageBlocksLogosLogosMutation {
  logo: String
  alt: String
  href: String
}

input PageBlocksLogosMutation {
  headline: String
  logos: [PageBlocksLogosLogosMutation]
}

input PageBlocksCardCardsMutation {
  title: String
  body: JSON
  href: String
  x: Float
  width: Float
}

input PageBlocksCardMutation {
  cards: [PageBlocksCardCardsMutation]
}

input PageBlocksFeaturedMutation {
  category: String
  size: Float
}

input PageBlocksRichtextMutation {
  body: JSON
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  cta: PageBlocksCtaMutation
  quote: PageBlocksQuoteMutation
  gallery: PageBlocksGalleryMutation
  fact: PageBlocksFactMutation
  logos: PageBlocksLogosMutation
  card: PageBlocksCardMutation
  featured: PageBlocksFeaturedMutation
  richtext: PageBlocksRichtextMutation
}

input PageMutation {
  blocks: [PageBlocksMutation]
}

input PostBlocksHeroPositionTextMutation {
  x: Float
  width: Float
  y: Float
  height: Float
}

input PostBlocksHeroPositionImageMutation {
  x: Float
  width: Float
  y: Float
  height: Float
}

input PostBlocksHeroPositionMutation {
  text: PostBlocksHeroPositionTextMutation
  image: PostBlocksHeroPositionImageMutation
}

input PostBlocksHeroMutation {
  title: String
  subtitle: String
  image: String
  position: PostBlocksHeroPositionMutation
}

input PostBlocksCtaButtonMutation {
  label: String
  href: String
}

input PostBlocksCtaMutation {
  title: String
  subtitle: String
  button: PostBlocksCtaButtonMutation
}

input PostBlocksQuoteMutation {
  quote: String
  author: String
  x: Float
  width: Float
}

input PostBlocksGalleryGalleryMutation {
  image: String
  alt: String
  x: Float
  width: Float
  height: Float
}

input PostBlocksGalleryMutation {
  gallery: [PostBlocksGalleryGalleryMutation]
}

input PostBlocksFactFactMutation {
  headline: String
  subheadline: String
  x: Float
  width: Float
}

input PostBlocksFactMutation {
  fact: [PostBlocksFactFactMutation]
}

input PostBlocksLogosLogosMutation {
  logo: String
  alt: String
  href: String
}

input PostBlocksLogosMutation {
  headline: String
  logos: [PostBlocksLogosLogosMutation]
}

input PostBlocksCardCardsMutation {
  title: String
  body: JSON
  href: String
  x: Float
  width: Float
}

input PostBlocksCardMutation {
  cards: [PostBlocksCardCardsMutation]
}

input PostBlocksFeaturedMutation {
  category: String
  size: Float
}

input PostBlocksRichtextMutation {
  body: JSON
}

input PostBlocksMutation {
  hero: PostBlocksHeroMutation
  cta: PostBlocksCtaMutation
  quote: PostBlocksQuoteMutation
  gallery: PostBlocksGalleryMutation
  fact: PostBlocksFactMutation
  logos: PostBlocksLogosMutation
  card: PostBlocksCardMutation
  featured: PostBlocksFeaturedMutation
  richtext: PostBlocksRichtextMutation
}

input PostMutation {
  title: String
  category: String
  date: String
  description: String
  size: Float
  image: String
  blocks: [PostBlocksMutation]
}

input MapMutation {
  date: String
}

schema {
  query: Query
  mutation: Mutation
}
  